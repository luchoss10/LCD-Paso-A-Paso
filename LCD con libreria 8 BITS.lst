CCS PCM C Compiler, Version 5.008, 5967               17-mar.-18 16:05

               Filename:   C:\Users\LuisMiguel\Documents\GitHub\LCD-Paso-A-Paso\LCD con libreria 8 BITS.lst

               ROM used:   395 words (5%)
                           Largest free fragment is 2048
               RAM used:   5 (1%) at main() level
                           19 (5%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   163
0003:  NOP
.................... #include <16f887.h>                    
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA C8,37
000D:  DATA EC,30
000E:  DATA A0,26
000F:  DATA 75,37
0010:  DATA E4,37
0011:  DATA A0,2A
0012:  DATA 54,28
0013:  DATA 00,00
*
0116:  MOVF   0B,W
0117:  MOVWF  21
0118:  BCF    0B.7
0119:  BSF    03.5
011A:  BSF    03.6
011B:  BSF    0C.7
011C:  BSF    0C.0
011D:  NOP
011E:  NOP
011F:  BCF    03.5
0120:  MOVF   0C,W
0121:  ANDLW  7F
0122:  BTFSC  03.2
0123:  GOTO   15D
0124:  BCF    03.6
0125:  MOVWF  22
0126:  BSF    03.6
0127:  MOVF   0D,W
0128:  BCF    03.6
0129:  MOVWF  23
012A:  BSF    03.6
012B:  MOVF   0F,W
012C:  BCF    03.6
012D:  MOVWF  24
012E:  MOVF   22,W
012F:  MOVWF  25
0130:  CALL   0EA
0131:  MOVF   23,W
0132:  BSF    03.6
0133:  MOVWF  0D
0134:  BCF    03.6
0135:  MOVF   24,W
0136:  BSF    03.6
0137:  MOVWF  0F
0138:  BSF    03.5
0139:  BSF    0C.7
013A:  BSF    0C.0
013B:  NOP
013C:  NOP
013D:  BCF    03.5
013E:  RLF    0C,W
013F:  RLF    0E,W
0140:  ANDLW  7F
0141:  BTFSC  03.2
0142:  GOTO   15D
0143:  BCF    03.6
0144:  MOVWF  22
0145:  BSF    03.6
0146:  MOVF   0D,W
0147:  BCF    03.6
0148:  MOVWF  23
0149:  BSF    03.6
014A:  MOVF   0F,W
014B:  BCF    03.6
014C:  MOVWF  24
014D:  MOVF   22,W
014E:  MOVWF  25
014F:  CALL   0EA
0150:  MOVF   23,W
0151:  BSF    03.6
0152:  MOVWF  0D
0153:  BCF    03.6
0154:  MOVF   24,W
0155:  BSF    03.6
0156:  MOVWF  0F
0157:  INCF   0D,F
0158:  BTFSC  03.2
0159:  INCF   0F,F
015A:  BCF    03.6
015B:  GOTO   119
015C:  BSF    03.6
015D:  BCF    03.6
015E:  BTFSC  21.7
015F:  BSF    0B.7
0160:  BCF    0A.3
0161:  BCF    0A.4
0162:  GOTO   18A (RETURN)
....................  
.................... #list 
....................  
.................... #FUSES NOWDT, NOPUT, INTRC_IO, NOPROTECT, NOBROWNOUT, NOWRT 
.................... #use delay (internal=8M)            
*
0014:  MOVLW  26
0015:  MOVWF  04
0016:  BCF    03.7
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   027
001A:  MOVLW  02
001B:  MOVWF  78
001C:  CLRF   77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 78,F
0020:  GOTO   01C
0021:  MOVLW  97
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 00,F
0026:  GOTO   01A
0027:  RETURN
....................  
.................... //Establecemos el modo de 8 bits de la LCD y escogemos el puerto que utilizaremos 
.................... #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... //Establecemos los pines de E RS y RW. 
.................... #define LCD_ENABLE_PIN    PIN_D0  
.................... #define LCD_RS_PIN               PIN_D1 
.................... #define LCD_RW_PIN             PIN_D2 
.................... //Incluimos la libreria de la LCD 
.................... #INCLUDE <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0049:  MOVLW  0F
004A:  ANDWF  06,W
004B:  IORLW  F0
004C:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004D:  BCF    03.5
004E:  BSF    08.2
004F:  BSF    03.5
0050:  BCF    08.2
....................    delay_cycles(1); 
0051:  NOP
....................    lcd_output_enable(1); 
0052:  BCF    03.5
0053:  BSF    08.0
0054:  BSF    03.5
0055:  BCF    08.0
....................    delay_cycles(1); 
0056:  NOP
....................    high = lcd_read_nibble(); 
0057:  BCF    03.5
0058:  CALL   03B
0059:  MOVF   78,W
005A:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
005B:  BCF    08.0
005C:  BSF    03.5
005D:  BCF    08.0
....................    delay_cycles(1); 
005E:  NOP
....................    lcd_output_enable(1); 
005F:  BCF    03.5
0060:  BSF    08.0
0061:  BSF    03.5
0062:  BCF    08.0
....................    delay_us(1); 
0063:  GOTO   064
....................    low = lcd_read_nibble(); 
0064:  BCF    03.5
0065:  CALL   03B
0066:  MOVF   78,W
0067:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
0068:  BCF    08.0
0069:  BSF    03.5
006A:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006B:  MOVLW  0F
006C:  ANDWF  06,W
006D:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
006E:  BCF    03.5
006F:  SWAPF  2D,W
0070:  MOVWF  77
0071:  MOVLW  F0
0072:  ANDWF  77,F
0073:  MOVF   77,W
0074:  IORWF  2C,W
0075:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003B:  MOVF   06,W
003C:  MOVWF  77
003D:  SWAPF  06,W
003E:  ANDLW  0F
003F:  MOVWF  78
....................   #endif 
0040:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0028:  SWAPF  2D,W
0029:  ANDLW  F0
002A:  MOVWF  77
002B:  MOVLW  0F
002C:  ANDWF  06,W
002D:  IORWF  77,W
002E:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
002F:  NOP
....................    lcd_output_enable(1); 
0030:  BSF    08.0
0031:  BSF    03.5
0032:  BCF    08.0
....................    delay_us(2); 
0033:  GOTO   034
0034:  GOTO   035
....................    lcd_output_enable(0); 
0035:  BCF    03.5
0036:  BCF    08.0
0037:  BSF    03.5
0038:  BCF    08.0
0039:  BCF    03.5
003A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0041:  BSF    03.5
0042:  BCF    08.0
....................    lcd_rs_tris(); 
0043:  BCF    08.1
....................    lcd_rw_tris(); 
0044:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0045:  BCF    03.5
0046:  BCF    08.1
0047:  BSF    03.5
0048:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0076:  MOVF   78,W
0077:  MOVWF  2C
0078:  BTFSS  2C.7
0079:  GOTO   07C
007A:  BSF    03.5
007B:  GOTO   049
....................    lcd_output_rs(address); 
007C:  MOVF   2A,F
007D:  BTFSS  03.2
007E:  GOTO   081
007F:  BCF    08.1
0080:  GOTO   082
0081:  BSF    08.1
0082:  BSF    03.5
0083:  BCF    08.1
....................    delay_cycles(1); 
0084:  NOP
....................    lcd_output_rw(0); 
0085:  BCF    03.5
0086:  BCF    08.2
0087:  BSF    03.5
0088:  BCF    08.2
....................    delay_cycles(1); 
0089:  NOP
....................    lcd_output_enable(0); 
008A:  BCF    03.5
008B:  BCF    08.0
008C:  BSF    03.5
008D:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
008E:  BCF    03.5
008F:  SWAPF  2B,W
0090:  MOVWF  2C
0091:  MOVLW  0F
0092:  ANDWF  2C,F
0093:  MOVF   2C,W
0094:  MOVWF  2D
0095:  CALL   028
....................    lcd_send_nibble(n & 0xf); 
0096:  MOVF   2B,W
0097:  ANDLW  0F
0098:  MOVWF  2C
0099:  MOVWF  2D
009A:  CALL   028
009B:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
009C:  MOVLW  0F
009D:  BSF    03.5
009E:  ANDWF  06,W
009F:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00A0:  BCF    08.0
....................    lcd_rs_tris(); 
00A1:  BCF    08.1
....................    lcd_rw_tris(); 
00A2:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00A3:  BCF    03.5
00A4:  BCF    08.1
00A5:  BSF    03.5
00A6:  BCF    08.1
....................    lcd_output_rw(0); 
00A7:  BCF    03.5
00A8:  BCF    08.2
00A9:  BSF    03.5
00AA:  BCF    08.2
....................    lcd_output_enable(0); 
00AB:  BCF    03.5
00AC:  BCF    08.0
00AD:  BSF    03.5
00AE:  BCF    08.0
....................      
....................    delay_ms(15); 
00AF:  MOVLW  0F
00B0:  BCF    03.5
00B1:  MOVWF  26
00B2:  CALL   014
....................    for(i=1;i<=3;++i) 
00B3:  MOVLW  01
00B4:  MOVWF  21
00B5:  MOVF   21,W
00B6:  SUBLW  03
00B7:  BTFSS  03.0
00B8:  GOTO   0C1
....................    { 
....................        lcd_send_nibble(3); 
00B9:  MOVLW  03
00BA:  MOVWF  2D
00BB:  CALL   028
....................        delay_ms(5); 
00BC:  MOVLW  05
00BD:  MOVWF  26
00BE:  CALL   014
00BF:  INCF   21,F
00C0:  GOTO   0B5
....................    } 
....................     
....................    lcd_send_nibble(2); 
00C1:  MOVLW  02
00C2:  MOVWF  2D
00C3:  CALL   028
....................    delay_ms(5); 
00C4:  MOVLW  05
00C5:  MOVWF  26
00C6:  CALL   014
....................    for(i=0;i<=3;++i) 
00C7:  CLRF   21
00C8:  MOVF   21,W
00C9:  SUBLW  03
00CA:  BTFSS  03.0
00CB:  GOTO   0D5
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00CC:  MOVF   21,W
00CD:  CALL   004
00CE:  MOVWF  22
00CF:  CLRF   2A
00D0:  MOVF   22,W
00D1:  MOVWF  2B
00D2:  CALL   041
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D3:  INCF   21,F
00D4:  GOTO   0C8
00D5:  BCF    0A.3
00D6:  BCF    0A.4
00D7:  GOTO   183 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00D8:  DECFSZ 27,W
00D9:  GOTO   0DB
00DA:  GOTO   0DE
....................       address=LCD_LINE_TWO; 
00DB:  MOVLW  40
00DC:  MOVWF  28
00DD:  GOTO   0DF
....................    else 
....................       address=0; 
00DE:  CLRF   28
....................       
....................    address+=x-1; 
00DF:  MOVLW  01
00E0:  SUBWF  26,W
00E1:  ADDWF  28,F
....................    lcd_send_byte(0,0x80|address); 
00E2:  MOVF   28,W
00E3:  IORLW  80
00E4:  MOVWF  29
00E5:  CLRF   2A
00E6:  MOVF   29,W
00E7:  MOVWF  2B
00E8:  CALL   041
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E9:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00EA:  MOVF   25,W
00EB:  XORLW  07
00EC:  BTFSC  03.2
00ED:  GOTO   0F8
00EE:  XORLW  0B
00EF:  BTFSC  03.2
00F0:  GOTO   0FD
00F1:  XORLW  06
00F2:  BTFSC  03.2
00F3:  GOTO   105
00F4:  XORLW  02
00F5:  BTFSC  03.2
00F6:  GOTO   10B
00F7:  GOTO   110
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F8:  MOVLW  01
00F9:  MOVWF  26
00FA:  MOVWF  27
00FB:  CALL   0D8
00FC:  GOTO   115
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00FD:  CLRF   2A
00FE:  MOVLW  01
00FF:  MOVWF  2B
0100:  CALL   041
....................                      delay_ms(2); 
0101:  MOVLW  02
0102:  MOVWF  26
0103:  CALL   014
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0104:  GOTO   115
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0105:  MOVLW  01
0106:  MOVWF  26
0107:  MOVLW  02
0108:  MOVWF  27
0109:  CALL   0D8
010A:  GOTO   115
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
010B:  CLRF   2A
010C:  MOVLW  10
010D:  MOVWF  2B
010E:  CALL   041
010F:  GOTO   115
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0110:  MOVLW  01
0111:  MOVWF  2A
0112:  MOVF   25,W
0113:  MOVWF  2B
0114:  CALL   041
....................      #endif 
....................    } 
0115:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
0163:  MOVF   03,W
0164:  ANDLW  1F
0165:  MOVWF  03
0166:  MOVLW  71
0167:  BSF    03.5
0168:  MOVWF  0F
0169:  MOVF   0F,W
016A:  BSF    03.6
016B:  MOVF   09,W
016C:  ANDLW  C0
016D:  MOVWF  09
016E:  BCF    03.6
016F:  BCF    1F.4
0170:  BCF    1F.5
0171:  MOVLW  00
0172:  BSF    03.6
0173:  MOVWF  08
0174:  BCF    03.5
0175:  CLRF   07
0176:  CLRF   08
0177:  CLRF   09
0178:  BCF    03.7
.................... { 
....................    setup_oscillator(OSC_8MHZ|OSC_INTRC); 
0179:  MOVLW  71
017A:  BSF    03.5
017B:  BCF    03.6
017C:  MOVWF  0F
017D:  MOVF   0F,W
....................    //Configuramos los puertos que usaremos como salidas 
....................    set_tris_B(0); 
017E:  MOVLW  00
017F:  MOVWF  06
....................    SET_TRIS_D(0); 
0180:  MOVWF  08
....................     
....................    lcd_init();    //Inicializamos LCD 
0181:  BCF    03.5
0182:  GOTO   09C
....................     
....................    lcd_putc("Hola Mundo UTP");    //"Hola Mundo" 
0183:  MOVLW  0C
0184:  BSF    03.6
0185:  MOVWF  0D
0186:  MOVLW  00
0187:  MOVWF  0F
0188:  BCF    03.6
0189:  GOTO   116
.................... } 
018A:  SLEEP

Configuration Fuses:
   Word  1: 2CF4   INTRC_IO NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
